# -*- coding: utf-8 -*-
"""Emotion.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/113e7kdakatqh7yRiF3JMcpidjIq0VeuN
"""

# Commented out IPython magic to ensure Python compatibility.
try:
  # %tensorflow_version only exists in Colab.
#   %tensorflow_version 2.x
except Exception:
  pass
import tensorflow as tf

import sklearn
from sklearn import metrics
from tensorflow import keras
from keras.models import Sequential
from keras.layers import Conv2D, MaxPool2D, Flatten, Dense, Dropout,Activation,BatchNormalization,MaxPooling2D
from keras.preprocessing.image import ImageDataGenerator

import os
from google.colab import drive

Epoch=10
IMG_HEIGHT=150
IMG_WIDTH=150
Batch_size=100

drive.mount('/content/drive/')

PATH= os.path.join("/content/drive/My Drive/Emotion-Detection/Datasets")

train_dir = os.path.join(PATH, 'train')
valid_dir = os.path.join(PATH, 'validation')

train_image_generator= ImageDataGenerator(rescale=1./255,
                                          height_shift_range=.15,
                                          width_shift_range=.15,
                                          zoom_range=0.5,
                                          vertical_flip=True,
                                          rotation_range=45)

valid_image_generator= ImageDataGenerator(rescale=1./255,
                                          height_shift_range=.15,
                                          width_shift_range=.15,
                                          zoom_range=0.5,
                                          vertical_flip=True,
                                          rotation_range=45)

train_data= train_image_generator.flow_from_directory(train_dir,
                                                      target_size=[IMG_HEIGHT,IMG_WIDTH],
                                                      shuffle=True,
                                                      batch_size=Batch_size)
valid_data= train_image_generator.flow_from_directory(valid_dir,
                                                      target_size=[IMG_HEIGHT,IMG_WIDTH],
                                                      shuffle=True,
                                                      batch_size=Batch_size)

model = Sequential()

# Block-1

model.add(Conv2D(32,(3,3),padding='same',kernel_initializer='he_normal',input_shape=(IMG_HEIGHT,IMG_WIDTH,3)))
model.add(Activation('elu'))
model.add(BatchNormalization())
model.add(Conv2D(32,(3,3),padding='same',kernel_initializer='he_normal',input_shape=(IMG_HEIGHT,IMG_WIDTH,3)))
model.add(Activation('elu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.2))

# Block-2 

model.add(Conv2D(64,(3,3),padding='same',kernel_initializer='he_normal'))
model.add(Activation('elu'))
model.add(BatchNormalization())
model.add(Conv2D(64,(3,3),padding='same',kernel_initializer='he_normal'))
model.add(Activation('elu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.2))

# Block-3

model.add(Conv2D(128,(3,3),padding='same',kernel_initializer='he_normal'))
model.add(Activation('elu'))
model.add(BatchNormalization())
model.add(Conv2D(128,(3,3),padding='same',kernel_initializer='he_normal'))
model.add(Activation('elu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.2))

# Block-4 

model.add(Conv2D(256,(3,3),padding='same',kernel_initializer='he_normal'))
model.add(Activation('elu'))
model.add(BatchNormalization())
model.add(Conv2D(256,(3,3),padding='same',kernel_initializer='he_normal'))
model.add(Activation('elu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.2))

# Block-5

model.add(Flatten())
model.add(Dense(64,kernel_initializer='he_normal'))
model.add(Activation('elu'))
model.add(BatchNormalization())
model.add(Dropout(0.5))

# Block-6

model.add(Dense(64,kernel_initializer='he_normal'))
model.add(Activation('elu'))
model.add(BatchNormalization())
model.add(Dropout(0.5))

# Block-7

model.add(Dense(5,kernel_initializer='he_normal'))
model.add(Activation('softmax'))

print(model.summary())

model.compile(keras.optimizers.Adam(learning_rate=0.001),
              keras.losses.BinaryCrossentropy(),
              metrics=["accuracy"])

model.fit_generator(
    train_data,
    validation_data=valid_data,
    epochs=Epoch
)

save_path="/content/drive/My Drive/Emotion_model.h5"
model.save(save_path)